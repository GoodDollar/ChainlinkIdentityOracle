// SPDX-License-Identifier: MIT

pragma solidity >0.8.0;

import "hardhat/console.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol";
import "@chainlink/contracts/src/v0.8/ChainlinkClient.sol";

contract IdentityOracle is ChainlinkClient, Ownable {
    address public dao_avatar; // this implementation is only to test. In live it would be replaced for dao.avatar

    bytes32 public stateHash; // current state hash
    string  public stateDataIPFS; // ipfs cid

    uint256 public constant ORACLE_PAYMENT = 10**16;
    bytes32 public GET_STATE_HASH_IPFSCID_JOBID =  stringToBytes32("a36cda0a7636428db24b1e61a5a369766"); //"a36cda0a7636428db24b1e61a5a36976";
    address public ORACLE_ADDRESS =
        0x4f4202CCAf8999Cf86e02cB9324B909aE0Fe1E04;
    address public CHAINLINK_NODE_ADDRESS =
        0x8f662fb14f7358c2BAeb9b5DdA4fE40F3fc65018;

    uint256 public lastStartUpdProcInvoked;

    struct WhitelistProofState {
        uint256 lastProofDate;
        uint256 lastAuthenticatedDate;
    }

    mapping(address => WhitelistProofState) private whitelistProofState;
    event ProofResult(bool);
    mapping(address => bool) private oracleState; // Store oracle address ad if isAllowed

    constructor(address _link) Ownable() {
        if (_link == address(0)) {
            setChainlinkToken(0xa36085F69e2889c224210F603D836748e7dC0088);  // It's Link address of Kovan
        } else {
            setChainlinkToken(_link);
        }
        dao_avatar = msg.sender;
        oracleState[ORACLE_ADDRESS] = true;
        oracleState[CHAINLINK_NODE_ADDRESS] = true;
        oracleState[msg.sender] = true;
    }

    function _onlyOracle() internal view {
        require(
            oracleState[msg.sender],
            "only allowed oracle can call this method"
        );
    }

    function _onlyAvatar() internal view {
        require(
            address(dao_avatar) == msg.sender,
            "only avatar can call this method"
        );
    }

    //- only the DAO can approve/remove an oracle. onlyAvatar is defined in DAOUpgradeableContract
    function setOracle(address _oracle, bool _isAllowed) public {
        _onlyAvatar();
        oracleState[_oracle] = _isAllowed;
    }

    // It's is the first function to be called by the oracle to update IPFS CID and StatetHash
    function startIPFSandStateHashProcess() public {
        _onlyOracle();
        lastStartUpdProcInvoked = block.timestamp;
        Chainlink.Request memory req = buildChainlinkRequest(
            GET_STATE_HASH_IPFSCID_JOBID,
            address(this),
            this.setFulfillStateHashIPFSCID.selector
        );
        requestOracleDataFrom(address(ORACLE_ADDRESS), req, ORACLE_PAYMENT);
    }

    // It's the second function to be called by the oracle to store the tmpStateHash value
    function setFulfillStateHashIPFSCID(bytes32 _requestId, bytes memory _statehashipfscid)
        public
        recordChainlinkFulfillment(_requestId)
    // This function is called only oracle
    //- only approved oracles can set the new merkle state plus link to ipfs data used to create state
    {
        _onlyOracle();
        (bytes32 _statehash, string memory _ipfscid) = abi.decode(_statehashipfscid,(bytes32,string));
        stateHash = _statehash;
        stateDataIPFS = _ipfscid;
    }

    //- prove that pair publicAddress, lastAuthenticated exists in current state.
    //update address state in smart contract. also update address lastProofDate (required by isWhitelisted below).
    //Proof can be generated by "sdk" defined in previous step.
    function prove(
        address _address,
        uint256 _lastAuthenticated,
        bytes32[] memory _proof
    ) public {
        bool result = false;
        (, result) = _checkMerkleProof(
            _address,
            _lastAuthenticated,
            stateHash,
            _proof
        );
        //update address state in smart contract. also update address lastProofDate (required by isWhitelisted below).
        if (result) {
            WhitelistProofState memory state;
            state.lastProofDate = block.timestamp;
            state.lastAuthenticatedDate = _lastAuthenticated;
            whitelistProofState[_address] = state;
        }
        emit ProofResult(result);
    }

    function _checkMerkleProof(
        address _address,
        uint256 _lastAuthenticated,
        bytes32 _root,
        bytes32[] memory _proof
    ) internal pure returns (bytes32 leafHash, bool isProofValid) {
        leafHash = keccak256(abi.encode(_address, _lastAuthenticated));
        isProofValid = MerkleProofUpgradeable.verify(_proof, _root, leafHash);
    }

    //- returns true if address is whitelisted under maxProofAge and maxAuthentication age restrictions.
    //maxProofAge should be compared to lastProofDate and maxAuthenticationAge to lastAuthenticated.
    //if 0 is supplied then they are ignored.
    function isWhitelisted(
        address _address,
        uint256 _maxProofAgeInDays,
        uint256 _maxAuthenticationAgeInDays
    ) public view returns (bool) {
        bool result = false;
        WhitelistProofState memory state = whitelistProofState[_address];
        if (state.lastProofDate > 0) {
            if (
                (_maxAuthenticationAgeInDays == 0 ||
                    state.lastAuthenticatedDate >
                    block.timestamp - _maxAuthenticationAgeInDays * 1 days) &&
                (_maxProofAgeInDays == 0 ||
                    state.lastProofDate >
                    block.timestamp - _maxProofAgeInDays * 1 days)
            ) {
                result = true;
            }
        }
        return result;
    }
  
    function setStateHashIPFSCIDJobID(string memory _jobid) public {
        _onlyAvatar();
        GET_STATE_HASH_IPFSCID_JOBID = stringToBytes32(_jobid);
    }

    function setCLNodeAdderss(address _clnodeaddress) public {
        _onlyAvatar();
        CHAINLINK_NODE_ADDRESS = _clnodeaddress;
    }

    function withdrawLink() public onlyOwner {
        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());
        require(
            link.transfer(msg.sender, link.balanceOf(address(this))),
            "Unable to transfer"
        );
    }

    function stringToBytes32(string memory source)
        private
        pure
        returns (bytes32 result)
    {
        bytes memory tempEmptyStringTest = bytes(source);
        if (tempEmptyStringTest.length == 0) {
            return 0x0;
        }

        assembly {
            // solhint-disable-line no-inline-assembly
            result := mload(add(source, 32))
        }
    }
}
